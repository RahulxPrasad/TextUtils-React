{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","placeholder","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","new_text","toUpperCase","showAlert","toLowerCase","split","join","document","getElementById","select","navigator","clipboard","writeText","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","AboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3ac556d6.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n// import {Link} from 'react-router-dom';\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\n    >\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"#\">\n          {props.title}\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\n                Home\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              {/* <Link className=\"nav-link\" to=\"/about\">\n                {props.AboutText}\n              </Link> */}\n            </li>\n            {/* <li className=\"nav-item dropdown\">\n          <a className=\"nav-link dropdown-toggle\" href=\"/\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n            Dropdown\n          </a>\n          <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n            <li><a className=\"dropdown-item\" href=\"/\">Action</a></li>\n            <li><a className=\"dropdown-item\" href=\"/\">Another action</a></li>\n            <li><hr className=\"dropdown-divider\"/></li>\n            <li><a className=\"dropdown-item\" href=\"/\">Something else here</a></li>\n          </ul>\n        </li>\n        <li className=\"nav-item\">\n          <a className=\"nav-link disabled\" href=\"/\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</a>\n        </li> */}\n          </ul>\n\n          <form className=\"d-flex\">\n            <input\n              className=\"form-control me-2\"\n              type=\"search\"\n              placeholder=\"Search\"\n              aria-label=\"Search\"\n            />\n            <button className=\"btn-success btn-outline mx-2\" type=\"submit\">\n              Search\n            </button>\n          </form>\n          <div\n            className={` mx-5 form-check form-switch text-${\n              props.mode === \"light\" ? \"dark\" : \"light\"\n            }`}\n          >\n            <input\n              className=\"form-check-input\"\n              onClick={props.toggleMode}\n              type=\"checkbox\"\n              id=\"flexSwitchCheckDefault\"\n            />\n            <label\n              className=\"form-check-label\"\n              htmlFor=\"flexSwitchCheckDefault\"\n            >\n              Enable Dark Mode\n            </label>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = { title: PropTypes.string, AboutText: PropTypes.string };\n\nNavbar.defaultProps = { title: \"set title here\", AboutText: \"About\" };\n","import React, { useState } from \"react\"; // using hook 'useState'\n\nexport default function TextForm(props) {\n  // syntax:  const [count, setCount] = useState(0);\n  const [text, setText] = useState(\"\");\n  // text = \"new text\";       // wrong way to change the state\n  // setText = \"new text\";    // right way to change the state\n\n  const handleOnChange = (event) => {\n    setText(event.target.value);\n  };\n\n  const handleUppClick = () => {\n    let new_text = text.toUpperCase();\n    setText(new_text);\n    props.showAlert(\"Converted to Uppercase!\", \"success\");\n  };\n\n  const handleLowClick = () => {\n    let new_text = text.toLowerCase();\n    setText(new_text);\n    props.showAlert(\"Converted to Lowercase!\", \"success\");\n  };\n\n  const handleClear = () => {\n    let new_text = \"\";\n    setText(new_text);\n    props.showAlert(\"Cleared All Text!\", \"success\");\n  };\n\n  const handleCopy = () => {\n    var text = document.getElementById(\"myBox\");\n    text.select();\n    navigator.clipboard.writeText(text.value);\n    props.showAlert(\"Copied to clipboard\", \"success\");\n  };\n\n  const handleRemSpaces = () => {\n    let new_text = text.split(/[ ]+/);\n    setText(new_text.join(\" \"));\n    props.showAlert(\"Extra spaces removed!\", \"success\");\n  };\n\n  return (\n    <>\n      <div\n        className=\"container my-4\"\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\n      >\n        <h2>{props.heading} </h2>\n        <div className=\"mb-3\">\n          <textarea\n            className=\"form-control\"\n            value={text}\n            onChange={handleOnChange}\n            style={{\n              backgroundColor: props.mode === \"light\" ? \"white\" : \"#0b3366\",\n              color: props.mode === \"light\" ? \"black\" : \"white\",\n            }}\n            id=\"myBox\"\n            rows=\"10\"\n            placeholder=\"Enter your text here\"\n          ></textarea>\n        </div>\n        <button className=\"btn btn-warning\" onClick={handleUppClick}>\n          Convert to UpperCase\n        </button>\n        <button className=\"btn btn-warning mx-4\" onClick={handleLowClick}>\n          Convert to LowerCase\n        </button>\n        <button className=\"btn btn-warning\" onClick={handleRemSpaces}>\n          Remove Extra spaces\n        </button>\n        <button className=\"btn btn-warning mx-4\" onClick={handleCopy}>\n          Copy All\n        </button>\n        <button className=\"btn btn-danger\" onClick={handleClear}>\n          Clear All\n        </button>\n      </div>\n      <div\n        className=\"container my-4\"\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\n      >\n        <h3>Your Text Summary</h3>\n        <p>\n          {text.split(\" \").length} words, {text.length} characters\n        </p>\n        <p>{0.008 * text.split(\" \").length} Minutes required to read.</p>\n        <h4>Preview:</h4>\n        <p>\n          {text.length > 0 ? text : \"Enter something above to preview here\"}\n        </p>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nexport default function Alert(props) {\n  const capitalize = (word) => {\n    const lower = word.toLowerCase();\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\n  };\n  return (\n    props.alert && (\n      <div\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\n        role=\"alert\"\n      >\n        <strong> {capitalize(props.alert.type)} </strong>: {props.alert.msg}\n        {/* <button\n        type=\"button\"\n        className=\"btn-close\"\n        data-bs-dismiss=\"alert\"\n        aria-label=\"Close\"\n      ></button> */}\n      </div>\n    )\n  );\n}\n","// import logo from './logo.svg';\nimport \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar.js\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // tells whether darks mode enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled!\", \"success\");\n    } else {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#011938\";\n      showAlert(\"Dark mode has been enabled!\", \"success\");\n      document.title = \"TextUtils- Dark Mode\";\n    }\n  };\n\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n\n      <div className=\"container\">\n      {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n\n        <TextForm\n          showAlert={showAlert}\n          heading=\"Enter the text to analyze:\"\n          mode={mode}\n        />\n          {/* </Route>\n        </Switch> */}\n        \n        {/* <About/> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}